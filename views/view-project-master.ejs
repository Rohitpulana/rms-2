<h1>Project Master Records</h1>

<script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>



<!-- Search & Pagination Controls -->
<form id="topControls" class="search-bar" style="margin-bottom: 20px; display: flex; gap: 10px; align-items: center;">
  <input type="text" id="searchInput" placeholder="🔍 Search projects..." style="padding: 12px; font-size: 15px; border-radius: 10px; border: 1px solid #ccc; width: 250px;" />
  <a href="/upload-project-master" style="background: #3498db; color: white; padding: 9px 18px; border-radius: 6px; text-decoration: none; font-size: 15px; margin-left: 10px; margin-top: -20px; position: relative; display: inline-block;">📤 Upload Projects</a>
  <a href="#" id="addProjectBtn" style="background: #3498db; color: white; padding: 9px 18px; border-radius: 6px; text-decoration: none; font-size: 15px; margin-left: 5px; margin-top: -20px; position: relative; display: inline-block;">➕ Add Project</a>
  <button type="button" id="exportExcelBtn" style="background: #3498db; color: white; padding: 12px 18px; border-radius: 6px; font-size: 15px; margin-left: 5px; margin-top: -20px; position: relative; display: inline-block; border: none; cursor: pointer;">📥 Excel</button>
  <button id="bulkDeleteBtn" style="background: #3498db; color: white; padding: 12px 15px; border: none; border-radius: 8px; cursor: pointer; display: none; margin-left: 10px; margin-top: -20px; position: relative;">🗑 Delete Selected</button>
</form>

<!-- Table -->
<div class="table-container">
  <table>
    <thead>
      <tr>
        <th><input type="checkbox" id="selectAll" style="cursor: pointer;"></th>
        <th>Project Name</th>
        <th>Start Date</th>
        <th>End Date</th>
        <th>Project Manager</th>
        <th>CBSL Client</th>
        <th>Division</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% if (projects.length === 0) { %>
        <tr><td colspan="8" style="text-align:center;">No project master records found.</td></tr>
      <% } else { %>
        <% projects.forEach((project, idx) => { %>
          <tr data-idx="<%= idx %>" data-id="<%= project._id %>">
            <td><input type="checkbox" class="row-checkbox" value="<%= project._id %>" style="cursor: pointer;"></td>
            <td><%= project.projectName %></td>
            <td><%= project.startDate %></td>
            <td><%= project.endDate %></td>
            <td><%= project.projectManager %></td>
            <td><%= project.cbslClient %></td>
            <td><%= project.dihClient %></td>
            <td class="actions">
              <button type="button" class="edit-btn" data-idx="<%= idx %>" style="background: #3498db; color: #222; border: none; border-radius: 5px; padding: 5px 12px; cursor: pointer; font-size: 14px;">✏ Edit</button>
              <form method="POST" action="/project-master/delete/<%= project._id %>" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this project?');">
                <button type="submit" style="font-size: 22px; line-height: 1; padding: 2px 10px;">🗑</button>
              </form>
            </td>
          </tr>
        <% }) %>
      <% } %>
    </tbody>
  </table>
</div>

<!-- Responsive Modal -->
<div id="projectModal">
  <div style="background:#fff; padding:24px 20px; border-radius:12px; width:100%; max-width:600px; max-height:90vh; overflow-y:auto; box-sizing:border-box;">
    <h2 id="modalTitle" style="margin-bottom: 20px;">Add Project</h2>
    <form id="projectForm" method="POST" action="/project-master/add" style="display: grid; gap: 16px;">
      <input type="hidden" name="_id" id="projectId">

      <div>
        <label for="projectName">📁 Project Name</label>
        <input type="text" name="projectName" id="projectName" required style="width: 100%; padding: 10px;">
      </div>

      <div style="display: flex; gap: 16px;">
        <div style="flex: 1;">
          <label for="startDate">📅 Start Date</label>
          <input type="date" name="startDate" id="startDate" required style="width: 100%; padding: 10px;">
        </div>
        <div style="flex: 1;">
          <label for="endDate">📅 End Date</label>
          <input type="date" name="endDate" id="endDate" required style="width: 100%; padding: 10px;">
        </div>
      </div>

      <div>
        <label for="projectManager">👨‍💼 Project Manager</label>
        <input type="text" name="projectManager" id="projectManager" required style="width: 100%; padding: 10px;">
      </div>

      <div>
        <label for="cbslClient">🏢 CBSL Client</label>
        <input type="text" name="cbslClient" id="cbslClient" required style="width: 100%; padding: 10px;">
      </div>

      <div>
        <label for="dihClient">🏭 DIH Division</label>
        <input type="text" name="dihClient" id="dihClient" required style="width: 100%; padding: 10px;">
      </div>

      <div style="text-align: right;">
        <button type="button" id="cancelModalBtn" style="margin-right: 10px;">Cancel</button>
        <button type="submit" id="saveProjectBtn" style="background: #3498db; color: white; padding: 8px 16px; border: none; border-radius: 6px;">Save</button>
      </div>
    </form>
  </div>
</div>

<!-- JS -->
<script>
  const searchInput = document.getElementById('searchInput');
  const rowsPerPageSelector = document.getElementById('rowsPerPage');
  let currentPage = 1;

  function renderTable() {
    const filter = searchInput.value.toLowerCase();
    const rows = Array.from(document.querySelectorAll('tbody tr')).filter(row => row.querySelectorAll('td').length > 1);
    const filtered = rows.filter(row => row.textContent.toLowerCase().includes(filter));
    rows.forEach(row => row.style.display = 'none');
    const noDataRow = document.querySelector('tbody tr td[colspan]');
    if (filtered.length === 0 && noDataRow) noDataRow.style.display = '';
    else if (noDataRow) noDataRow.style.display = 'none';

    let rowsPerPage = (!rowsPerPageSelector || rowsPerPageSelector.value === 'all') ? filtered.length : parseInt(rowsPerPageSelector.value);
    const start = (currentPage - 1) * rowsPerPage;
    const end = start + rowsPerPage;
    filtered.slice(start, end).forEach(row => row.style.display = '');
    
    // Update checkbox handlers and selection count
    updateCheckboxHandlers();
    updateBulkDeleteButton();
  }

  function renderTableWithHandlers() {
    renderTable();
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.onclick = () => {
        const idx = btn.dataset.idx;
        const row = document.querySelector(`tr[data-idx="${idx}"]`).children;
        document.getElementById('modalTitle').textContent = 'Edit Project';
        document.getElementById('projectForm').action = '/project-master/edit';
        document.getElementById('projectId').value = document.querySelector(`tr[data-idx="${idx}"]`).dataset.id;
        document.getElementById('projectName').value = row[1].textContent; // Changed from row[0] to row[1]
        document.getElementById('startDate').value = row[2].textContent; // Changed from row[1] to row[2]
        document.getElementById('endDate').value = row[3].textContent; // Changed from row[2] to row[3]
        document.getElementById('projectManager').value = row[4].textContent; // Changed from row[3] to row[4]
        document.getElementById('cbslClient').value = row[5].textContent; // Changed from row[4] to row[5]
        document.getElementById('dihClient').value = row[6].textContent; // Changed from row[5] to row[6]
        document.getElementById('projectModal').style.display = 'flex';
      };
    });
  }

  document.getElementById('addProjectBtn').onclick = () => {
    document.getElementById('modalTitle').textContent = 'Add Project';
    document.getElementById('projectForm').action = '/project-master/add';
    ['projectId', 'projectName', 'startDate', 'endDate', 'projectManager', 'cbslClient', 'dihClient'].forEach(id => document.getElementById(id).value = '');
    document.getElementById('projectModal').style.display = 'flex';
  };

  document.getElementById('cancelModalBtn').onclick = () => {
    document.getElementById('projectModal').style.display = 'none';
  };

  window.onclick = (e) => {
    if (e.target.id === 'projectModal') {
      document.getElementById('projectModal').style.display = 'none';
    }
  };

  searchInput.oninput = () => {
    currentPage = 1;
    renderTableWithHandlers();
  };
  
  if (rowsPerPageSelector) {
    rowsPerPageSelector.onchange = () => {
      currentPage = 1;
      renderTableWithHandlers();
    };
  }

  // Bulk delete functionality
  function updateCheckboxHandlers() {
    // Handle "select all" checkbox
    const selectAll = document.getElementById('selectAll');
    const rowCheckboxes = document.querySelectorAll('.row-checkbox');
    
    selectAll.onchange = function() {
      const visibleCheckboxes = Array.from(rowCheckboxes).filter(cb => 
        cb.closest('tr').style.display !== 'none'
      );
      visibleCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateBulkDeleteButton();
    };
    
    // Handle individual row checkboxes
    rowCheckboxes.forEach(checkbox => {
      checkbox.onchange = function() {
        updateSelectAllState();
        updateBulkDeleteButton();
      };
    });
  }
  
  function updateSelectAllState() {
    const selectAll = document.getElementById('selectAll');
    const visibleCheckboxes = Array.from(document.querySelectorAll('.row-checkbox')).filter(cb => 
      cb.closest('tr').style.display !== 'none'
    );
    const checkedVisible = visibleCheckboxes.filter(cb => cb.checked);
    
    if (checkedVisible.length === 0) {
      selectAll.indeterminate = false;
      selectAll.checked = false;
    } else if (checkedVisible.length === visibleCheckboxes.length) {
      selectAll.indeterminate = false;
      selectAll.checked = true;
    } else {
      selectAll.indeterminate = true;
    }
  }
  
  function updateBulkDeleteButton() {
    const checkedBoxes = document.querySelectorAll('.row-checkbox:checked');
    const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
    
    bulkDeleteBtn.style.display = checkedBoxes.length > 0 ? 'inline-block' : 'none';
  }
  
  function bulkDelete() {
    const checkedBoxes = document.querySelectorAll('.row-checkbox:checked');
    const ids = Array.from(checkedBoxes).map(cb => cb.value);
    
    if (ids.length === 0) {
      alert('Please select projects to delete.');
      return;
    }
    
    if (confirm(`Are you sure you want to delete ${ids.length} selected project(s)?`)) {
      fetch('/project-master/bulk-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'CSRF-Token': '<%= csrfToken %>'
        },
        body: JSON.stringify({ ids: ids })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          location.reload();
        } else {
          alert('Error deleting projects: ' + data.message);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error deleting projects');
      });
    }
  }
  
  // Bulk delete button click handler
  document.getElementById('bulkDeleteBtn').onclick = bulkDelete;

  renderTableWithHandlers();

  // Export to Excel functionality
  document.getElementById('exportExcelBtn').onclick = function() {
    const table = document.querySelector('.table-container table');
    const clone = table.cloneNode(true);
    
    // Remove the checkbox column and actions column
    clone.querySelector('thead tr').removeChild(clone.querySelector('thead tr th:first-child')); // Remove checkbox header
    clone.querySelector('thead tr').removeChild(clone.querySelector('thead tr').lastElementChild); // Remove actions header
    
    clone.querySelectorAll('tbody tr').forEach(row => {
      if (row.cells.length > 1) { // Skip "no data" rows
        row.removeChild(row.firstElementChild); // Remove checkbox cell
        row.removeChild(row.lastElementChild); // Remove actions cell
      }
    });
    
    const ws = XLSX.utils.table_to_sheet(clone);
    ws['!cols'] = Array.from(clone.querySelectorAll('thead th')).map(th => ({ wch: Math.max(12, th.textContent.length + 2) }));
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Projects");
    XLSX.writeFile(wb, "projects.xlsx");
  };
</script>
